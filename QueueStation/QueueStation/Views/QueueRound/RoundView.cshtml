@model QueueStation.Controllers.QueueGrid

@{
    if (SessionBag.Current.HasCredentials == true)
    {
    }
    else
    {
        Response.Redirect("/CredPage/CredPage");
    }
}
@using (Html.BeginForm("PageAddSaveRevert", "EditQueue", FormMethod.Post, new { id = "submitForm" }))
{
    <br />
    <legend>@Html.Raw((Model == null || Model.QueueRound <= 0) ? "" : "Round: " + Model.QueueRound)</legend>
    <div>
        <b>&nbsp;</b>

    @Model.grid.GetHtml(
            tableStyle: "webgrid-table",
            headerStyle: "webgrid-header",
            footerStyle: "webgrid-footer",
            alternatingRowStyle: "webgrid-alternating-row",
            selectedRowStyle: "webgrid-selected-row",
            rowStyle: "webgrid-row-style",
            mode: WebGridPagerModes.All,
            columns: Model.grid.Columns(
            Model.grid.Column(null, "State", format: (item) => Html.Raw(Model.QueueData(item.SingerKey, "QueueState", item.QueueState)), canSort: false),
            Model.grid.Column("SingerKey", "Singer", canSort: false),
            Model.grid.Column("QueueSong", "Song", format: (item) => Html.Raw(Model.QueueData(item.SingerKey, "QueueSong", item.QueueSong)), canSort: false),
            Model.grid.Column("QueueArtist", "Artist", format: (item) => Html.Raw(Model.QueueData(item.SingerKey, "QueueArtist", item.QueueArtist)), canSort: false),
            Model.grid.Column("QueueNote", "Note", format: (item) => Html.Raw(Model.QueueData(item.SingerKey, "QueueNote", item.QueueNote)), canSort: false),
            Model.grid.Column(null, "Link", format: item => Html.ActionLink(Model.GetLink(item.QueueLink as string), "PageLaunch", "EditQueue", new {item.QueueRound, item.QueueLink }, new { @style = "font-size:smaller;text-decoration:underline;" })),
            Model.grid.Column(null, null, format: item => Html.ActionLink("Edit", "PageEditQueue", "EditQueue", new { item.SingerKey, item.QueueRound }, new { @style = "font-size:smaller;text-decoration:underline;" })),
            Model.grid.Column(null, null, format: (item) => Html.Raw(Model.QueueData(item.SingerKey, "QueueLink", item.QueueLink)), canSort: false, style: "hidden")
        )
    )
    </div>
    <div>@Html.TextBoxFor(m => m.QueueRound, new { type = "hidden" })</div>
    if (SessionBag.Current.IsKj == true)
    {
    <div class="form-actions no-color">
        <input id="addQueue" name="command" type="submit" value="Add" class="btn" />
        <input id="saveQueue" name="command" type="submit" value="Save" class="btn" />
        <input id="revertQueue" name="command" type="submit" value="Revert" class="btn" />
    </div>
    }
}

